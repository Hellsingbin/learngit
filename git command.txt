设置用户名和邮箱
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
//用户名和邮箱既可以全局设置（一台电脑上所有的仓库都使用该信息），也可以为每个仓库单独设置

创建新的git目录(在Windows中是创建一个新的文件夹)
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
pwd命令用于显示当前目录

将这个目录变成Git可以管理的仓库：
$ git init

将（新/被修改）的文件放入git仓库一共两步：添加+确认
$ git add filename
//使用命令git add <file>，注意，可反复多次使用，添加多个文件；
$ git commit -m "message" //-m后面的内容是伴随本次提交所提供的改动信息
//commit可以一次提交很多文件

查看仓库状态
$ git status

查看具体文件的版本信息
$ git diff filename
//如果git status告诉你有文件被修改过，用git diff可以查看修改内容

查看日志
$ git log

回退项目版本
$ git reset --hard HEAD^
//回退l两个版本HEAD^^ 一百个 HEAD~100
//在未关闭的窗口中可以回退到回退之前的本版，方法是输入版本号，版本不会被删除，但是会默认不可见
//HEAD是指向当前版本的指针

查看命令日志
$ git reflog
//命令日志包含了输入过的命令，和每条命令对应的执行信息，reflog可以查看被覆盖的版本的版本号

撤销修改（从工作区撤销或者从暂存区撤销）
$ git checkout -- filename
//撤回至最近一次git commit或git add时的状态
//git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
//git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

$ git reset HEAD filename
命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区

删除文件
$ git rm filename
$ git commit
//从git仓库中删除这个文件然后提交

误删文件恢复
 git checkout -- filename
//从版本库中找到对应的文件并恢复到本地

将git仓库推送到github
$ git remote add origin git@github.com:Hellsingbin/learngit.git
//添加并链接到一个远程库 origin是远程库的默认名字
$ git push -u origin master
//把本地仓库推送到远程库上，git push 上传命令 -u第一次将本地库上传时使用的模式 origin远程库 选择master分支
$ git push origin master
//对本地库进行修改之后再上传

删除链接的远程库
$ git remote rm origin

克隆远程库
$ git clone git@github.com:michaelliao/gitskills.git

分支管理

创建新的分支
$ git checkout -b dev
//创建一个新的dev分支并切换到dev分支，相当于下面两条命令
$ git branch dev
//创建名为dev的新分支
$ git checkout dev
//切换到dev分支

查看当前分支
$ git branch
//git branch命令会列出所有分支，当前分支前面会标一个*号

合并分支
$ git merge dev
git merge命令用于合并指定分支到当前分支

删除分支
$ git branch -d dev
//删除dev分支





